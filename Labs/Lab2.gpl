int window_width = 500;
int window_height = 500;

string window_title = "Avoid The Ball!";


int ball_x_increment = 8;
int ball_y_increment = 3;
int animation_speed = 80; // 1 is slowest, 100 is fastest
int life = 10;
int play = 1; // changes to 0 when the game ends
int i;
int l = 9;
int bumps; // This will keep track of how many times the ball has touched the walls
int count;

rectangle left_wall(x = 10, y = 10, w = 10, h = 480);
rectangle top_wall(x = 10, y = 480, w = 480, h = 10);
rectangle right_wall(x = 480, y = 10, w = 10, h = 480);
rectangle bottom_wall(x = 10, y = 10, w = 480, h = 10);

rectangle user_life[life];
rectangle player(x = 220, y = 150, w = 20, h = 20, blue=300);

textbox winorlose (x = window_width-300, y = window_height/2 - 100, text = "", red = 1);
textbox life_text (x = 30, y = window_height/2 + 12, text = "USER's REMAINING LIFE:");
textbox instruction (x = 30, y = window_height/2 - 15, text = "Survive as long as you can avoiding the ball!");
textbox key_instruction_1 (x = 30, y = window_height/2 - 30, text = "Use Left,Right,Up,Down arrow keys to move");


// declare the animation handler functions
forward animation ball_animate(circle cur_ball);

// create a ball to bounce around the screen
circle ball(x = 100, y = 200, radius = 20, animation_block = ball_animate);


initialization {
    // Initializing user tank's life
    for (i = 0; i < life; i += 1)
    {
        user_life[i].h = 10;
        user_life[i].w = window_width/20;
        user_life[i].x = i*(user_life[i].w)+i + 30; 
        user_life[i].y = window_height/2;
        user_life[i].red = 0;
        user_life[i].green = 1;
    }
}

// animation handler for the ball 
// this block is called at regular intervals for the ball object
animation ball_animate(circle cur_ball)
{
    if (play == 1)
    {
        // Count is necessary to offset the shrinking so the
        // ball doesn't get stuck outside the square
        if (count > 0){
            count++;
        }

        if (bumps > 3){
            bumps = 0;
            count = 1;
        }
        if (count > 15 && 
                cur_ball.x > left_wall.x + 60 &&
                cur_ball.x < right_wall.x - 60 &&
                cur_ball.y > bottom_wall.y + 60 &&
                cur_ball.y < top_wall.y - 60) {
            count = 0;
            left_wall.x +=20;
            top_wall.y -= 20;
            right_wall.x -=20;
            bottom_wall.y += 20;
        }

        // if ball has reached either the left or right, reverse its direction
        if (cur_ball touches left_wall || cur_ball touches right_wall){
            ball_x_increment = -ball_x_increment;
            bumps++;
        }

        // if ball has reached either the top or bottom, reverse its direction
        if (cur_ball touches top_wall || cur_ball touches bottom_wall)
        {
            ball_y_increment = -ball_y_increment;
            bumps++;
        }

        // If ball touches player, they lose health
        if (cur_ball touches player)
        {
            user_life[l].visible = false;
            l -= 1;
            if (l == -1) 
            {
                play = 0;
                winorlose.text = "YOU LOSE!";
            }
        }
            
        // on each step of the animation, move the ball
        cur_ball.x += ball_x_increment;
        cur_ball.y += ball_y_increment;

    }
}

on leftarrow
{
    if (play == 1)
    {
        if (player.x > left_wall.x + 10)
        {
            player.x -= 10;
        }
    }
}

on rightarrow
{
    if (play == 1)
    {
        if (player.x < right_wall.x - 10)
        {
            player.x += 10;
        }
    }
}

on uparrow
{
    if (play == 1)
    {
        if (player.y < top_wall.y - 10)
        {
            player.y += 10;
        }
    }
}

on downarrow
{
    if (play == 1)
    {
        if (player.y > bottom_wall.y + 10)
        {
            player.y -= 10;
        }
    }
}

